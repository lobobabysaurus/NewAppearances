// Generated by CoffeeScript 1.10.0

/*
 * Location app related Javascript
 * @module Location
 */

(function() {
  var Location;

  $(function() {
    var local;
    $("#printDirections").hide();
    local = new Location();
    local.initializeForm();
    google.maps.event.addDomListener(window, 'load', local.initializeMaps);
    $("#attemptCalculation").click(function() {
      local.calculateRoute(local.processForm());
      return $.post("/directions/save", $("#directionsForm").serializeArray());
    });
    return $("#printDirections").click(function() {
      var printWindow;
      printWindow = window.open('', '', 'width=' + window.innerWidth + ",height=" + window.innerHeight);
      printWindow.document.write($("#directionsResult").html());
      printWindow.print();
      return printWindow.close();
    });
  });


  /*
   * Class for dealing with Location data
   *
   * @constructor
   * @class Location
   */

  Location = (function() {

    /*
     * Latitute and Longitude directions of New Appearances
     * @property salonLatLng
     * @type {google.maps.LatLng}
     */
    var directionService, directionsToSalon, salonAddress, salonLatLng;

    function Location() {}

    salonLatLng = new google.maps.LatLng(39.946707, -75.302254);


    /*
     * Street Address directions of New Appearances
     * @property salonAddress
     * @type {String}
     */

    salonAddress = "530 Burmont Road, Drexel Hill, PA 19026";


    /*
     * Direction service to set on map generation and to be used for finding directions
     * @property directionService
     * @type {google.maps.DirectionsService}
     */

    directionService = new google.maps.DirectionsService();


    /*
     * Renders the directions to the salon after form submission
     * @property directionsToSalon
     * @type {google.maps.DirectionsRenderer}
     */

    directionsToSalon = new google.maps.DirectionsRenderer();


    /*
     * Create a Google Map for the page
     * @method initializeMaps
     */

    Location.prototype.initializeMaps = function() {
      var map, mapOptions, marker;
      mapOptions = {
        center: salonLatLng,
        zoom: 15
      };
      map = new google.maps.Map(document.getElementById('storeMap'), mapOptions);
      marker = new google.maps.Marker({
        position: salonLatLng,
        map: map,
        title: "New Appearances"
      });
      directionsToSalon.setMap(map);
      return directionsToSalon.setPanel(document.getElementById('directionsResult'));
    };


    /*
     * Find the route between the entered directions and the salon and display it on the page
     * @method calculateRoute
     * @param {String} originAddress
     */

    Location.prototype.calculateRoute = function(originAddress) {
      var request;
      request = {
        origin: originAddress,
        destination: salonAddress,
        travelMode: google.maps.TravelMode.DRIVING
      };
      return directionService.route(request, function(response, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          $("#directionsResult").show();
          directionsToSalon.setDirections(response);
          $("#directionsError").text(null);
          return $("#printDirections").show();
        } else {
          $("#directionsError").text("Error finding a route to the salon");
          $("#directionsResult").hide();
          return $("#printDirections").hide();
        }
      });
    };


    /*
     * Parse the directions form for address data and cast it to a formatted string
     * @method processForm
     * @returns {String} The address which has been entered by the user
     */

    Location.prototype.processForm = function() {
      var address;
      address = "";
      $.each($("#directionsForm").serializeArray(), function(index, formSet) {
        var value;
        value = formSet['value'];
        if (value) {
          if ($.inArray(formSet['name'], ["zip", "state"]) === -1) {
            address += value + ", ";
          } else {
            address += value + " ";
          }
        }
        return $.cookie(formSet['name'], formSet['value'], {
          expires: 7
        });
      });
      return address;
    };


    /*
     * Iterates through all fields in the form and populates them with a value stored in Cookies if it exists
     * @method initializeForm
     */

    Location.prototype.initializeForm = function() {
      var formFields;
      formFields = ["street", "city", "state", "zip"];
      return $.each(formFields, function(index, field) {
        return $("input[name='" + field + "']").val($.cookie(field));
      });
    };

    return Location;

  })();

}).call(this);

//# sourceMappingURL=directions.js.map
